---
layout:	post
title:	"What are Feature Stores and Why Are They Critical For Scaling Machine Learning"
date:	2022-02-20
canonical_url: https://mlopshowto.com/what-are-feature-stores-and-why-are-they-critical-for-scaling-machine-learning-94e14afec81d
---





---

![](/img/0*K8iqrOnVCRUIJfVm)Photo by [Artem Gavrysh](https://unsplash.com/@tmwd?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&utm_medium=referral)As companies start to realise that **Machine Learning** has no value unless it is in production, new requirements start to rise — specially as the complexity of Machine Learning systems starts to increase as well.

At the same time, we are reaching a stage in AI & ML maturity where complex, cutting edge models are no longer the silver bullet for unlocking value out of data. Most practitioners in the field argue that most models can only be as good as the data that is used to train them. Andrew Ng describes this phenomena as the shift from **Model Centric AI** to **Data Centric AI**.

![](/img/0*POXUEzb-ayBEKZAa)Photo by [Javier Allegue Barros](https://unsplash.com/@soymeraki?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&utm_medium=referral)The urgency and opportunities that lie in **Data Centric AI** are also reinforced by Google, who concluded in a recent paper that [data is the most under-valued and de-glamorised aspect of AI.](https://storage.googleapis.com/pub-tools-public-publication-data/pdf/0d556e45afc54afeb2eb6b51a9bc1827b9961ff4.pdf)


> “Paradoxically, data is the most under-valued and de-glamorised aspect of AI”

### Feature Engineering

By now you might be aware that training Machine Learning models involves teaching it how to recognise **common patterns** in a training dataset. Once properly trained, a Machine Learning model should be able to correctly **predict** or **infer** **labels** or **outcomes** for **unseen,** or **real-world** data. In this context, **feature engineering** is paramount to extract the most possible value out of data.

**Feature engineering** can be understood as the process of uncovering these patterns in training data. Think about a *fraud detection* model, for instance. For a given training set containing *customer credit card transactions*, creating aggregated features based on *customer spending behaviour* (average monthly spend, for example) might be useful to uncover what had been previously **implicit patterns.** Thiscouldmake it easier for a model to distinguish **fraudulent** **transactions** from **legit** ones.

![](/img/0*rdvriiqq00M0SdCQ)Photo by [Nadine Shaabana](https://unsplash.com/@nadineshaabana?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&utm_medium=referral)### Main Challenges with Feature Engineering

While the example given above is quite simple, as use cases get more complex and data volumes increase, there are challenges associated with feature engineering.

1. **More scale means more complexity:** as your **data volume** and **size of your feature space** grows, more efficiency and computing power are needed in order to process that data and train models in a timely fashion
2. **Reusability**: features should be properly catalogued and their lineages should be known, so that it becomes simple to **map**, **understand** and **reuse** them across different use cases
3. **Feature hell**: teams working in an independent, siloed fashion risk working in the same types of features, although each with different definitions and calculations. This is inefficient and impacts consistency across different models which consume the same set of features — and it also complicates the task of building upon existing features.
4. **Managing lifecycle**: as time goes by, teams might find out that features are not useful anymore, or that feature definitions should be changed. Governance is also important: more often than not, teams want to limit who has access to each set of features, who changed feature definitions, and also why and when changes were performed.
5. **Audit & Interpretability:** predictions generated by models might be challenged, disputed or audited. Having a good, clear track record of feature sets used by each model is important.

### Feature Stores

The purpose of a **Feature Store** platform is to tackle this and other challenges that are common when doing feature engineering at scale. Having a solid Feature Store platform is paramount for achieving a good set of **MLOps** best practices. A common feature engineering and consumption lifecycle based on a feature store platform can be described by the diagram below.

![](/img/1*WUopmuFngG_f8oMk1MVQEw.png)[Source: Databricks](https://databricks.com/product/feature-store)### Existing Feature Store Offerings

Currently there are many players who offer feature store platforms. Some examples include:

* **Tecton**: developed initially at Uber (Project Michelangelo), Tecton became a spin off company that offers a SaaS Feature Store platform. It is also available as an open source framework (Feast)
* **Hopsworks**: developed by Logical Clocks, Hopsworks is another offering which is available both as open source and SaaS product.
* **Vertex AI Feature Store**: Google Cloud Platform offering for Feature Store, supporting BigQuery and GCS data sources.
* **Sagemaker Feature Store**: AWS offering for Feature Store. Supports integration with S3, Athena and AWS Glue.

Being able to establish an accurate connection between **feature set snapshots** and **different machine learning models** is also important to guarantee that a machine learning system’s predictions are consistent, explainable and traceable. Apart from all feature engineering challenges, a good feature store platform should be easy to integrate with other **MLOps** platforms, such as [MLflow](https://mlflow.org/).

![](/img/1*UFnmuEVU5j_Py1gJUzH2qg.png)Source: [Databricks](https://databricks.com/product/machine-learning)This is one of the areas in which **Databricks Feature Store** shines. Being part of the Lakehouse ecosystem, Databricks Feature Store targets both **batch** and **realtime** use cases, having seamless integration with **MLflow** (also developed by Databricks). Having everything as part of a unified platform reduces the complexity and overhead associated with the overall Machine Learning architecture.

For more details about **Feature Engineering, Databricks Feature Store** and how to get started, you can refer to the links below. You can also create a [free account](https://databricks.com/try-databricks) on Databricks to take Feature Store and many other nice capabilities for a spin.

1. [Feature Engineering at Scale](https://databricks.com/blog/2021/07/16/feature-engineering-at-scale.html)
2. [Use Case: Building a real-time Feature Store at IFood](https://databricks.com/session_na20/building-a-real-time-feature-store-at-ifood?utm_source=rafael.pierre&utm_medium=web)
3. [Databricks Feature Store Documentation](https://docs.databricks.com/applications/machine-learning/feature-store/index.html?utm_source=rafael.pierre&utm_medium=web)
4. [Databricks Feature Store: Sample Notebook](https://docs.databricks.com/_static/notebooks/machine-learning/feature-store-taxi-example.html?utm_source=rafael.pierre&utm_medium=web)

You might also like these:

[**Keeping Your Machine Learning Models on the Right Track: Getting Started with MLflow, Part 1**  
*Learn why Model Tracking and MLflow are critical for a successful machine learning project*mlopshowto.com](https://mlopshowto.com/keeping-your-machine-learning-models-on-the-right-track-getting-started-with-mlflow-part-1-f8ca857b5971 "https://mlopshowto.com/keeping-your-machine-learning-models-on-the-right-track-getting-started-with-mlflow-part-1-f8ca857b5971")[**Keeping Your Machine Learning Models on the Right Track: Getting Started with MLflow, Part 2**  
*Learn how to use MLflow Model Registry to track, register and deploy Machine Learning Models effectively.*mlopshowto.com](https://mlopshowto.com/keeping-your-machine-learning-models-on-the-right-track-getting-started-with-mlflow-part-2-bbc980a1f8dc "https://mlopshowto.com/keeping-your-machine-learning-models-on-the-right-track-getting-started-with-mlflow-part-2-bbc980a1f8dc")[**An Apache Airflow MVP: Complete Guide for a Basic Production Installation Using LocalExecutor**  
*Simple and quick way to bootstrap Airflow in production*mlopshowto.com](https://mlopshowto.com/an-apache-airflow-mvp-complete-guide-for-a-basic-production-installation-using-localexecutor-beb10e4886b2 "https://mlopshowto.com/an-apache-airflow-mvp-complete-guide-for-a-basic-production-installation-using-localexecutor-beb10e4886b2")

